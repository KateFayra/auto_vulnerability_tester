import nmap
import argparse

#Local files:
from json_parser import *
from crawler import *
#import exploit

TCP = 'tcp'
UDP = 'udp'

if __name__ == "__main__":
	parser = argparse.ArgumentParser(description='An automated vulnerability testing tool.')

	parser.add_argument('--gui', help='run with GUI', dest = 'gui', action='store_true')
	#group = parser.add_mutually_exclusive_group(required=True)
	##group.add_argument('--master', help='run as master', dest = 'master', action='store_true')
	#group.add_argument('--slave', help='run as slave', dest = 'slave', action='store_true')
	args = parser.parse_args()

	"""
	if args.gui:
		GUIThread = TkGUI()
		print("GUI launched!")

	if args.master:
		print("Running as master node.")
		a = initialize_array(True)
        
		print("A initialized: " + str(a.shape))
		bootstrap(True)

	if args.slave:
		print("Running as slave node.")
		a = initialize_array(False)
		bootstrap(False)
	"""

	ip_file = open('ip_list.txt', 'r')

	ip_addresses = []

	for line in ip_file:
		ip = line.split('\n')[0].split('#')[0].split(' ')[0]
		if ip is not "":
			ip_addresses.append(ip)

	ip_file.close()
	print(ip_addresses)

	json_data = json_object()
	nm = nmap.PortScanner()

	for ip in ip_addresses:

		print("Scanning " + str(ip))
		nm.scan(ip)
		try:
			json_data.add_host(nm[ip])
			protocols = nm[ip].all_protocols()

			#for protocol in protocols:
			#	print(nm[ip][protocol].keys())

			if TCP in protocols:
				TCP_ports = nm[ip][TCP].keys()
				for port in TCP_ports:
					state = nm[ip][TCP][port]['state']
					name = nm[ip][TCP][port]['name']
					product = nm[ip][TCP][port]['product']
					print("port: " + str(port) + ", state: " + str(state) + ", name: " + str(name) + ", product: " + str(product))
					
					
					#@Todo: check for potential exploits
					if name == "http":
						#@Todo: crawl checking for CGI/Input boxes, for shellshock, potential upload of code i.e. php
						url = 'http://' + ip + ':' + str(port)
						collected_links = http_crawl(url, ip, False)
						print("Collected links:")
						print(collected_links)

					"""

					#@Todo call exploit code:
					if heartbleed_possible:
						exploit.heartbleed(ip, port)
					if shellshock_possible:
						exploit.shellshock(ip, port)
					"""

		except KeyError:
			print("Host " + ip + " is not up.")

		
	save_json(json_data.data, "save.json")


#print("Parsing json:")
#json_data_loaded = parse_json("save.json")
#print(json_data_loaded.data)

