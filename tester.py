import nmap
import argparse

#Local files:
from json_parser import *
from crawler import *
from heartbleed import *
from shellshock import shellshock_listener, HOST_IP, HOST_PORT

TCP = 'tcp'
UDP = 'udp'


if __name__ == "__main__":
	parser = argparse.ArgumentParser(description='An automated vulnerability testing tool.')

	parser.add_argument('--gui', help='run with GUI', dest = 'gui', action='store_true')
	#group = parser.add_mutually_exclusive_group(required=True)
	##group.add_argument('--master', help='run as master', dest = 'master', action='store_true')
	#group.add_argument('--slave', help='run as slave', dest = 'slave', action='store_true')
	args = parser.parse_args()

	"""
	if args.gui:
		GUIThread = TkGUI()
		print("GUI launched!")

	if args.master:
		print("Running as master node.")
		a = initialize_array(True)
        
		print("A initialized: " + str(a.shape))
		bootstrap(True)

	if args.slave:
		print("Running as slave node.")
		a = initialize_array(False)
		bootstrap(False)
	"""


	shellshock_tester = shellshock_listener(HOST_IP, HOST_PORT)

	#If args.cgilist:
	cgi_file = open('cgi_list.txt', 'r')
	cgi_paths = []
	for line in cgi_file:
		path = line.split('\n')[0]
		if path is not "":	
			cgi_paths.append(path)

	ip_file = open('ip_list.txt', 'r')
	ip_addresses = []
	for line in ip_file:
		ip = line.split('\n')[0].split('#')[0].split(' ')[0]
		if ip is not "":
			ip_addresses.append(ip)

	ip_file.close()
	print(ip_addresses)

	json_data = json_object()
	nm = nmap.PortScanner()

	for ip in ip_addresses:

		print("Scanning " + str(ip))
		nm.scan(ip)#print() # contains info like downhosts = 1,0

		first_failed = False #@Todo: refactor
		try:
			protocols = nm[ip].all_protocols()
			if not nm[ip][TCP]:
				#json_data.add_host(nm[ip])
			#else:
				print("Note: Host " + ip + " seems down. Attempting to scan with different arguments.")
				first_failed = True

		except KeyError:
			print("Note: Host " + ip + " seems down. Attempting to scan with different arguments.")
			first_failed = True

		
		if first_failed:
			nm.scan(ip, arguments="-Pn")
			try:
				protocols = nm[ip].all_protocols()
				#if nm[ip][TCP]:
					#json_data.add_host(nm[ip])

			except KeyError:
				print("Host " + ip + " is not up.")
				#break;
			

		#for protocol in protocols:
		#	print(nm[ip][protocol].keys())

		if TCP in protocols:
			TCP_ports = nm[ip][TCP].keys()
			heartbleed_dict = {}
			links_dict = {}
			shellshock_tester.clear()
			#vulnerable_shellshock_URLS = []
			for port in TCP_ports:
				state = nm[ip][TCP][port]['state']
				name = nm[ip][TCP][port]['name']
				product = nm[ip][TCP][port]['product']
				print("port: " + str(port) + ", state: " + str(state) + ", name: " + str(name) + ", product: " + str(product))
				
				
				#@Todo: check for potential exploits
				if name == "http" or name == "http-alt" or port == 80 or port == 443 or port == 8080 or port == 8000:
					#@Todo: crawl checking for CGI/Input boxes, for shellshock, potential upload of code i.e. php
					url = 'http://' + ip + ':' + str(port)
					collected_links, form_dict = http_crawl(url, ip, False)

					#@Todo implement alternate URL list argument.
					for path in cgi_paths:
						url = 'http://' + ip + ':' + str(port) + path
						print("Crawling additionally to: ", url)
						collected_links_additional, form_dict_additional = http_crawl(url, ip, False, collected_links)
						form_dict = merge_form_dicts(form_dict, form_dict_additional)
						collected_links = append_list_if_not_exist(collected_links, collected_links_additional)


					if form_dict and collected_links:
						print("Collected links:")
						print(collected_links)
						print("Form dict:")
						print(form_dict)
						print(len(form_dict))
						print(len(collected_links))
						for link in list(form_dict.keys()):
							if link not in collected_links:
								print(link)

						links_dict[str(port)] = form_dict #@Todo: implement different ports properly in crawler!
						#assert len(form_dict) == len(collected_links)


					#Test heartbleed
					heartbleed_vulnerable = heartbleed_test(ip, port)
					print("heartbleed_vulnerable: " + str(heartbleed_vulnerable))
					#if heartbleed_vulnerable:
					heartbleed_dict[str(port)] = heartbleed_vulnerable

					#Test shellshock
					if form_dict:
						for URL in form_dict.keys():
							shellshock_tester.shellshock_test(URL)
							#print(shellshock_tester.vuln_list)

					#vulnerable_shellshock_URLS = append_list_if_not_exist(vulnerable_shellshock_URLS, shellshock_tester.vuln_list)

					"""

					#@Todo call exploit code:
					if heartbleed_possible:
						exploit.heartbleed(ip, port)
					if shellshock_possible:
						exploit.shellshock(ip, port)
					"""

			nm[ip]['links'] = links_dict
			nm[ip]['heartbleed'] = heartbleed_dict
			nm[ip]['shellshock'] = shellshock_tester.vuln_list
			json_data.add_host(nm[ip])


		
	save_json(json_data.data, "save.json")


#print("Parsing json:")
#json_data_loaded = parse_json("save.json")
#print(json_data_loaded.data)

