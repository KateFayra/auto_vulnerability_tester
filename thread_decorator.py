from threading import Thread, Event
from functools import wraps


def run_as_thread(func):

    @wraps(func)
    def thread_func(*args, **kwargs):
        thread = Thread(target=func, args=args, kwargs=kwargs)
        thread.daemon = True
        thread.start()
        return thread

    return thread_func


def run_as_stoppable(func):
    def wrapper(*args, **kwargs):
        stop_event = Event()
        @run_as_thread
        def loop():
            while not stop_event.is_set():
                try:
                    func(*args, **kwargs)
                except Exception as e:
                    print("Repeated job error'd with message:", e.message)
            print("exiting loop!")
        loop().name = "stoppable"
        return stop_event
    return wrapper


def repeat_periodic(interval):
    def decorator(func):
        def wrapper(*args, **kwargs):
            stop_event = Event()
            @run_as_thread
            def loop():
                while not stop_event.wait(interval):
                    try:
                        func(*args, **kwargs)
                    except Exception as e:
                        print("Repeated job error'd with message:", e.message)
                print("exiting periodic!")
            loop().name = "periodic"
            return stop_event
        return wrapper
    return decorator
