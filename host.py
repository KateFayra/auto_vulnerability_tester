class Service():
    def __init__(self, portnum):
        self.port = portnum
        self.dict = dict([('name', None), ('state', None), ('product', None)])

    def setValue(self, key, value):
        self.dict[key] = value

    def getValue(self, key):
        return self.dict[key]

    def get(self):
        return self.dict


class Host():
    """
    Node class for directed graph library.
    Extends string so you can use the Node object itself to read it's label.
    """
    #def __new__(self, IP, services):
        #new_node = super().__new__(cls, label)
        #new_node._object = object
        #new_node.


        #return new_node

    #def get_object(self):
    #    return self._object

    def __init__(self, IP):
        self.IP = IP
        self.services = []

    #def IP():
        #return self.IP

    def addService(self, port, name=None, state=None, product=None):
        newService = dict([('name', None), ('state', None), ('product', None)])
        newService['name'] = name
        newService['state'] = state
        newService['product'] = product
        
        self.services.append(newService)

        # newService = Service(port)
        # newService.setValue('name', name)
        # newService.setValue('state', state)
        # newService.setValue('product', product)
        # self.services.append(newService)

