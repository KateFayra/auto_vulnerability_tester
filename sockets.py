import socket
from thread_decorator import run_as_thread
import json
import numpy as np

class TransferSocket():
    def __init__(self):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        # For debugging purposes: allows us to reuse the socket
        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.conn_addr = None
        self.conn = None
        self.leftover = bytearray()

    def close(self):
        self.socket.shutdown(socket.SHUT_RDWR)
        print("Closing connection to ", self.conn_addr)

    def __del__(self):
        self.socket.close()
        print("Closing connection to ", self.conn_addr)

    def recv(self, buffer_size):
        data = self.leftover
        while len(data) < buffer_size:
            packet = self._sock_recv(buffer_size)
            if not packet:
                continue
            data.extend(packet)
        self.leftover = data[buffer_size:]
        return data[:buffer_size]

    def send_as_json(self, msg):
        msg = json.dumps(msg).encode("ascii", "ignore")
        self.send(np.int32(len(msg)))
        self.send(msg)

    def recv_as_json(self):
        buffer_size = int.from_bytes(self.recv(4), byteorder="little")
        msg = json.loads(self.recv(buffer_size).decode("ascii"))
        return msg



class RemoteSocket(TransferSocket):
    def connect(self, address, port):
        self.socket.connect((address, port))
        self.conn_addr = address
        print("Connected to ", address)

    def send(self, mesg):
        self.socket.send(mesg)

    def _sock_recv(self, buffer_size):
        return self.socket.recv(buffer_size)


class LocalSocket(TransferSocket):
    def bind(self, address, port):
        self.socket.bind((address, port))
        self.socket.listen(1)
        print("Bound to ", address)

    #@run_as_thread
    def accept(self):
        self.conn, self.conn_addr = self.socket.accept()

    def send(self, mesg):
        self.conn.send(mesg)

    def _sock_recv(self, buffer_size):
        return self.conn.recv(buffer_size)
